<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>學員作業網站: <a class="Link--inTextBlock" href="https://mdecd2025.github.io/hw-41223230/">https://mdecd2025.github.io/hw-41223230/</a></p>
<p>學員作業倉儲: https://github.com/mdecd2025/hw-41223230</p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<h2>repo</h2>
<h1>Tasks</h1>
<h2>task1</h2>
<p>將上學期舊版的python 311 更改為python 313，以利之後使用<span>新版的 SciTE, Portablegit, PUTTY, ShareX, Wink 以及原有的 tmp 及 home_ipv6, 以另存新的</span><span> start.bat</span><span> </span><span>啟動</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/X7X6ZT_ccvA" width="560"></iframe></span></p>
<h3>list</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document, ajax  # 從 Brython 的 browser 模組匯入 html、document 和 ajax，方便操作 DOM 和發送請求

url = "https://mde.tw/list/2b.txt"  # 要讀取的文字檔網址（學員清單）

# 定義當 AJAX 請求完成時要執行的函式
def on_complete(req):
    if req.status == 200:  # 如果請求成功（狀態碼 200）
        data = req.text.splitlines()  # 取得文字內容並按行分割成清單
        all_stud = data[1:]  # 去除第一行標題，只保留學生資料

        # 建立一個無序清單 (UL) 元素
        stud_list = html.UL()

        # 逐行處理每位學生的資料
        for stud in all_stud:
            fields = stud.split()  # 假設每行資料用空白分隔，將其分割成清單
            if len(fields) &gt;= 2:  # 確保至少有兩個欄位（學號和帳號）
                stud_id, account = fields[:2]  # 取得學號與帳號
                link = f"https://github.com/mde2025/hw-{stud_id}"  # 組合 GitHub 作業連結

                # 創建一個清單項目 (LI)，包含帳號和超連結
                stud_list &lt;= html.LI([
                    f"{account} - ",  # 顯示帳號
                    html.A(link, href=link, target="_blank")  # 超連結指向 GitHub 作業頁面，另開新視窗
                ])

        # 將總人數與名單插入至網頁指定區塊中
        document["brython_div1"] &lt;= html.P(f"總共有 {len(all_stud)} 名學員")  # 顯示總人數
        document["brython_div1"] &lt;= stud_list  # 顯示整個清單

    else:
        # 若請求失敗，顯示錯誤訊息
        document["brython_div1"] &lt;= html.P("無法取得資料")

# 發送 AJAX 請求，並設定完成後執行的函式
ajax.get(url, oncomplete=on_complete)
</pre>
<p></p>
<p>執行名單(64位學員)</p>
<div id="brython_div1">
<ul>
<li>a40923137 -<span> </span><a href="https://github.com/mde2025/hw-40923137" target="_blank">https://github.com/mde2025/hw-40923137</a></li>
<li>41023114 -<span> </span><a href="https://github.com/mde2025/hw-41023114" target="_blank">https://github.com/mde2025/hw-41023114</a></li>
<li>c-ching -<span> </span><a href="https://github.com/mde2025/hw-41023205" target="_blank">https://github.com/mde2025/hw-41023205</a></li>
<li>tseYU000 -<span> </span><a href="https://github.com/mde2025/hw-41023206" target="_blank">https://github.com/mde2025/hw-41023206</a></li>
<li>junpig10 -<span> </span><a href="https://github.com/mde2025/hw-41023210" target="_blank">https://github.com/mde2025/hw-41023210</a></li>
<li>41023213 -<span> </span><a href="https://github.com/mde2025/hw-41023213" target="_blank">https://github.com/mde2025/hw-41023213</a></li>
<li>41023215 -<span> </span><a href="https://github.com/mde2025/hw-41023215" target="_blank">https://github.com/mde2025/hw-41023215</a></li>
<li>41023216 -<span> </span><a href="https://github.com/mde2025/hw-41023216" target="_blank">https://github.com/mde2025/hw-41023216</a></li>
<li>snowfall-killer -<span> </span><a href="https://github.com/mde2025/hw-41023218" target="_blank">https://github.com/mde2025/hw-41023218</a></li>
<li>YUN4 -<span> </span><a href="https://github.com/mde2025/hw-41023232" target="_blank">https://github.com/mde2025/hw-41023232</a></li>
<li>www000123 -<span> </span><a href="https://github.com/mde2025/hw-41023237" target="_blank">https://github.com/mde2025/hw-41023237</a></li>
<li>41071202 -<span> </span><a href="https://github.com/mde2025/hw-41071202" target="_blank">https://github.com/mde2025/hw-41071202</a></li>
<li>41071203 -<span> </span><a href="https://github.com/mde2025/hw-41071203" target="_blank">https://github.com/mde2025/hw-41071203</a></li>
<li>41071204 -<span> </span><a href="https://github.com/mde2025/hw-41071204" target="_blank">https://github.com/mde2025/hw-41071204</a></li>
<li>41223201 -<span> </span><a href="https://github.com/mde2025/hw-41223201" target="_blank">https://github.com/mde2025/hw-41223201</a></li>
<li>41223202 -<span> </span><a href="https://github.com/mde2025/hw-41223202" target="_blank">https://github.com/mde2025/hw-41223202</a></li>
<li>41223203 -<span> </span><a href="https://github.com/mde2025/hw-41223203" target="_blank">https://github.com/mde2025/hw-41223203</a></li>
<li>41223205 -<span> </span><a href="https://github.com/mde2025/hw-41223205" target="_blank">https://github.com/mde2025/hw-41223205</a></li>
<li>41223206 -<span> </span><a href="https://github.com/mde2025/hw-41223206" target="_blank">https://github.com/mde2025/hw-41223206</a></li>
<li>emma0312 -<span> </span><a href="https://github.com/mde2025/hw-41223207" target="_blank">https://github.com/mde2025/hw-41223207</a></li>
<li>41223208-hw -<span> </span><a href="https://github.com/mde2025/hw-41223208" target="_blank">https://github.com/mde2025/hw-41223208</a></li>
<li>41223209 -<span> </span><a href="https://github.com/mde2025/hw-41223209" target="_blank">https://github.com/mde2025/hw-41223209</a></li>
<li>41223211 -<span> </span><a href="https://github.com/mde2025/hw-41223211" target="_blank">https://github.com/mde2025/hw-41223211</a></li>
<li>jjjay41223212 -<span> </span><a href="https://github.com/mde2025/hw-41223212" target="_blank">https://github.com/mde2025/hw-41223212</a></li>
<li>RAY41223215 -<span> </span><a href="https://github.com/mde2025/hw-41223215" target="_blank">https://github.com/mde2025/hw-41223215</a></li>
<li>41223216 -<span> </span><a href="https://github.com/mde2025/hw-41223216" target="_blank">https://github.com/mde2025/hw-41223216</a></li>
<li>41223217 -<span> </span><a href="https://github.com/mde2025/hw-41223217" target="_blank">https://github.com/mde2025/hw-41223217</a></li>
<li>41223218 -<span> </span><a href="https://github.com/mde2025/hw-41223218" target="_blank">https://github.com/mde2025/hw-41223218</a></li>
<li>41223219 -<span> </span><a href="https://github.com/mde2025/hw-41223219" target="_blank">https://github.com/mde2025/hw-41223219</a></li>
<li>ljg41223220 -<span> </span><a href="https://github.com/mde2025/hw-41223220" target="_blank">https://github.com/mde2025/hw-41223220</a></li>
<li>leeshaowei0716 -<span> </span><a href="https://github.com/mde2025/hw-41223221" target="_blank">https://github.com/mde2025/hw-41223221</a></li>
<li>41223222 -<span> </span><a href="https://github.com/mde2025/hw-41223222" target="_blank">https://github.com/mde2025/hw-41223222</a></li>
<li>linryan23 -<span> </span><a href="https://github.com/mde2025/hw-41223223" target="_blank">https://github.com/mde2025/hw-41223223</a></li>
<li>41223224 -<span> </span><a href="https://github.com/mde2025/hw-41223224" target="_blank">https://github.com/mde2025/hw-41223224</a></li>
<li>41223225 -<span> </span><a href="https://github.com/mde2025/hw-41223225" target="_blank">https://github.com/mde2025/hw-41223225</a></li>
<li>41223226-0 -<span> </span><a href="https://github.com/mde2025/hw-41223226" target="_blank">https://github.com/mde2025/hw-41223226</a></li>
<li>41223227 -<span> </span><a href="https://github.com/mde2025/hw-41223227" target="_blank">https://github.com/mde2025/hw-41223227</a></li>
<li>hyy41223228 -<span> </span><a href="https://github.com/mde2025/hw-41223228" target="_blank">https://github.com/mde2025/hw-41223228</a></li>
<li>41223229 -<span> </span><a href="https://github.com/mde2025/hw-41223229" target="_blank">https://github.com/mde2025/hw-41223229</a></li>
<li>41223230 -<span> </span><a href="https://github.com/mde2025/hw-41223230" target="_blank">https://github.com/mde2025/hw-41223230</a></li>
<li>41223231 -<span> </span><a href="https://github.com/mde2025/hw-41223231" target="_blank">https://github.com/mde2025/hw-41223231</a></li>
<li>41223232 -<span> </span><a href="https://github.com/mde2025/hw-41223232" target="_blank">https://github.com/mde2025/hw-41223232</a></li>
<li>41223233even -<span> </span><a href="https://github.com/mde2025/hw-41223233" target="_blank">https://github.com/mde2025/hw-41223233</a></li>
<li>41223234 -<span> </span><a href="https://github.com/mde2025/hw-41223234" target="_blank">https://github.com/mde2025/hw-41223234</a></li>
<li>41223235 -<span> </span><a href="https://github.com/mde2025/hw-41223235" target="_blank">https://github.com/mde2025/hw-41223235</a></li>
<li>41223236 -<span> </span><a href="https://github.com/mde2025/hw-41223236" target="_blank">https://github.com/mde2025/hw-41223236</a></li>
<li>Cloud41223237 -<span> </span><a href="https://github.com/mde2025/hw-41223237" target="_blank">https://github.com/mde2025/hw-41223237</a></li>
<li>WeihHuang -<span> </span><a href="https://github.com/mde2025/hw-41223239" target="_blank">https://github.com/mde2025/hw-41223239</a></li>
<li>ych0227 -<span> </span><a href="https://github.com/mde2025/hw-41223240" target="_blank">https://github.com/mde2025/hw-41223240</a></li>
<li>41223242 -<span> </span><a href="https://github.com/mde2025/hw-41223242" target="_blank">https://github.com/mde2025/hw-41223242</a></li>
<li>41223243 -<span> </span><a href="https://github.com/mde2025/hw-41223243" target="_blank">https://github.com/mde2025/hw-41223243</a></li>
<li>Liu41223244 -<span> </span><a href="https://github.com/mde2025/hw-41223244" target="_blank">https://github.com/mde2025/hw-41223244</a></li>
<li>41223245 -<span> </span><a href="https://github.com/mde2025/hw-41223245" target="_blank">https://github.com/mde2025/hw-41223245</a></li>
<li>41223246 -<span> </span><a href="https://github.com/mde2025/hw-41223246" target="_blank">https://github.com/mde2025/hw-41223246</a></li>
<li>CYC41223247 -<span> </span><a href="https://github.com/mde2025/hw-41223247" target="_blank">https://github.com/mde2025/hw-41223247</a></li>
<li>41223248 -<span> </span><a href="https://github.com/mde2025/hw-41223248" target="_blank">https://github.com/mde2025/hw-41223248</a></li>
<li>41223249 -<span> </span><a href="https://github.com/mde2025/hw-41223249" target="_blank">https://github.com/mde2025/hw-41223249</a></li>
<li>timluo123 -<span> </span><a href="https://github.com/mde2025/hw-41223250" target="_blank">https://github.com/mde2025/hw-41223250</a></li>
<li>41223251 -<span> </span><a href="https://github.com/mde2025/hw-41223251" target="_blank">https://github.com/mde2025/hw-41223251</a></li>
<li>supowen -<span> </span><a href="https://github.com/mde2025/hw-41223252" target="_blank">https://github.com/mde2025/hw-41223252</a></li>
<li>jacky93111 -<span> </span><a href="https://github.com/mde2025/hw-41223253" target="_blank">https://github.com/mde2025/hw-41223253</a></li>
<li>41271237 -<span> </span><a href="https://github.com/mde2025/hw-41271237" target="_blank">https://github.com/mde2025/hw-41271237</a></li>
</ul>
</div>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/5U3FO9RJmgY" width="560"></iframe></p>
<p></p>
<p></p>
<h2>task2</h2>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document, ajax  # 從 Brython 的 browser 模組匯入 html、document 和 ajax，用來操作網頁和發送請求

url = "https://mde.tw/list/2b.txt"  # 存放學生清單的純文字檔案網址

# G7 組員的學號集合，用 set 儲存，方便快速查詢是否為組員
g7_members = {"41023114", "41223218", "41223230", "41223247", "41223250", "41223240"}

# 定義當 AJAX 請求完成後要執行的函式
def on_complete(req):
    if req.status == 200:  # 如果伺服器回應狀態碼是 200（表示成功）
        data = req.text.splitlines()  # 將收到的純文字內容按行分割成列表
        all_stud = data[1:]  # 跳過第一行標題，取得所有學生資料

        # 建立一個無序清單 (UL) HTML 元素，用來放組員資料
        stud_list = html.UL()

        # 遍歷每一筆學生資料
        for stud in all_stud:
            fields = stud.split()  # 將每一行用空白切割，預期會得到 [學號, 帳號]
            if len(fields) &gt;= 2:  # 確保至少有學號和帳號兩欄
                stud_id, account = fields[:2]  # 取得學號和帳號

                # 如果這位學生是 G7 組員
                if stud_id in g7_members:
                    link = f"https://mdecd2025.github.io/hw-{stud_id}"  # 組合作業連結（對應 GitHub Pages）
                    
                    # 建立一個清單項目 (LI)，顯示帳號和超連結
                    stud_list &lt;= html.LI([
                        f"{account} - ",  # 顯示帳號
                        html.A(link, href=link, target="_blank")  # 加入一個可點擊的超連結，另開新分頁
                    ])

        # 把資訊插入到 HTML 中 id 為 brython_div1 的區塊
        document["brython_div1"] &lt;= html.P(f"G7 組員 ({len(g7_members)} 名)：")  # 顯示組員總數
        document["brython_div1"] &lt;= stud_list  # 顯示組員清單

    else:
        # 如果 AJAX 請求失敗（非 200 回應），顯示錯誤訊息
        document["brython_div1"] &lt;= html.P("無法取得資料")

# 使用 ajax.get 送出 GET 請求，完成後呼叫 on_complete 函式
ajax.get(url, oncomplete=on_complete)
</pre>
<p><a href="https://mdecd2025.github.io/hw-41223230/content/Brython.html?src=https://gist.githubusercontent.com/41223230/08a46cfd39bc94e2db5e3f6fd4def3da/raw/ad282570926b80d4247b77ba5c9b50fc0d6f6e10/g7*list">G7執行結果</a></p>
<p>小組成員名單</p>
<ul>
<li>41023114 -<span> </span><a href="https://mdecd2025.github.io/hw-41023114" target="_blank">https://mdecd2025.github.io/hw-41023114</a></li>
<li>41223218 -<span> </span><a href="https://mdecd2025.github.io/hw-41223218" target="_blank">https://mdecd2025.github.io/hw-41223218</a></li>
<li>41223230 -<span> </span><a href="https://mdecd2025.github.io/hw-41223230" target="_blank">https://mdecd2025.github.io/hw-41223230</a></li>
<li>ych0227 -<span> </span><a href="https://mdecd2025.github.io/hw-41223240" target="_blank">https://mdecd2025.github.io/hw-41223240</a></li>
<li>CYC41223247 -<span> </span><a href="https://mdecd2025.github.io/hw-41223247" target="_blank">https://mdecd2025.github.io/hw-41223247</a></li>
<li>timluo123 -<span> </span><a href="https://mdecd2025.github.io/hw-41223250" target="_blank">https://mdecd2025.github.io/hw-41223250</a></li>
</ul>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/2pGRGViRHXI" width="560"></iframe></p>
<h2>task3</h2>
<h2>task4</h2>
<p><a href="/downloads/base slvs.zip">base slvs.zip</a></p>
<p><a href="/downloads/base stl.zip">base stl.zip</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/JLAK_XxcROc" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/link_1 slvs.zip">link_1 slvs.zip</a></p>
<p><a href="/downloads/link_1 stl.zip">link_1 stl.zip</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Ts7ZFcCXKNk" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/link_2 slvs.zip">link_2 slvs.zip</a></p>
<p><a href="/downloads/link_2 stl.zip">link_2 stl.zip</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/tjHnqTaKbTE" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/link_3 slvs.zip">link_3 slvs.zip</a></p>
<p><a href="/downloads/link_3 stl.zip">link_3 stl.zip</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ypFlndK7_kQ" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/shaft_1 slvs.zip">shaft_1 slvs.zip</a></p>
<p><a href="/downloads/shaft_1 stl.zip">shaft_1 stl.zip</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/6WI1kWlBBtU" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/shaft_2 slvs.zip">shaft_2 slvs.zip</a></p>
<p><a href="/downloads/shaft_2 stl.zip">shaft_2 stl.zip</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/paWNpYCaGks" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/fourbar design.zip">fourbar design.zip</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/bdlbFYSnWEc" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/fourbar_assemble.zip">fourbar_assemble.zip</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/_vLZ-WDcLAA" width="560"></iframe></p>
<h2>task5</h2>
<p><a href="/downloads/ball.7z">ball.7z</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/2GvSd-wNujk" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/base plate.7z">base plate.7z</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/yJy7jEkn-CQ" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/connected board.7z">connected board.7z</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/rWlYSqvP8bg" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/press board.7z">press board.7z</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/6p5vr5nA5Vw" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/shaft.7z">shaft.7z</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/HTVPH48jvZY" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/shaft1.7z">shaft1.7z</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/wqvJcrwsViU" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/shaft2.7z">shaft2.7z</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/bH66Q43deCc" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/shaft3.7z">shaft3.7z</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/iii1WxkD5Hk" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/shaft4.7z">shaft4.7z</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/SOcDd300Djg" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/shoot board.7z">shoot board.7z</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/cCYTFHwxgBg" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/shoot desing.7z">shoot design.7z</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/cZgAqFCyGFA" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/shooter assembly.zip">shooter assembly.zip</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/bsL0zCX2XC8" width="560"></iframe></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h2>task6</h2>
<h1>Homework</h1>
<p>作業 (30%)</p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">part1:</p>
<p style="padding-left: 60px;">請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a> (1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> (171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p style="padding-left: 30px;">part2:</p>
<p style="padding-left: 60px;">請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 60px;">base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec.</p>
<p style="padding-left: 30px;">part3:</p>
<p style="padding-left: 60px;">模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2025_hw1_demo.7z">cd2025_hw1_demo.7z</a></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p style="padding-left: 30px;">請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 (<a href="https://www.youtube.com/watch?v=LloG_Jn_TI0&amp;t=51s">參考影片</a>)後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_ball_throwing_linkage.slvs">fourbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><a href="/downloads/sixbar_ball_throwing_linkage.slvs">sixbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><img alt="" height="264" src="/images/fourbar_ball_throwing_linkage.gif" width="400"/></p>
<h2>HW1</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Ew6fuEFF3K4" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/HW1.7z">fourbar webots.7z</a></p>
<p>操作流程</p>
<p class="cvGsUA direction-ltr align-start para-style-body"><span class="OYPEnA font-feature-liga-off font-feature-clig-off font-feature-calt-off text-decoration-none text-strikethrough-none">一開始先建一個 robot，然後在它的 children 裡加兩個 hinge joint 跟一個 solid。</span></p>
<p class="cvGsUA direction-ltr align-start para-style-body"><span class="OYPEnA font-feature-liga-off font-feature-clig-off font-feature-calt-off text-decoration-none text-strikethrough-none">solid 的部分我會把它改名叫做 base，然後在它的 children 裡右鍵新增一個 shape，進到 geometry 裡右鍵新增一個 box，然後把 X 的尺寸設成 1 公尺。</span></p>
<p class="cvGsUA direction-ltr align-start para-style-body"><span class="OYPEnA font-feature-liga-off font-feature-clig-off font-feature-calt-off text-decoration-none text-strikethrough-none">（之後就不再重複說明怎麼加 box 的步驟了。）</span></p>
<p class="cvGsUA direction-ltr align-start para-style-body"><span class="OYPEnA font-feature-liga-off font-feature-clig-off font-feature-calt-off text-decoration-none text-strikethrough-none">接著從兩個 hinge joint 任選一個，把它改名成 hinge joint1，另一個就叫 hinge joint4。</span></p>
<p class="cvGsUA direction-ltr align-start para-style-body"><span class="OYPEnA font-feature-liga-off font-feature-clig-off font-feature-calt-off text-decoration-none text-strikethrough-none">接下來點進 hinge joint1，在它的主線程下面，找到 endpoint，右鍵新增一個 solid，然後調整一下它的數值。rotation 的部分可以自己設定，當作是初始角度。</span></p>
<p class="cvGsUA direction-ltr align-start para-style-body"><span class="OYPEnA font-feature-liga-off font-feature-clig-off font-feature-calt-off text-decoration-none text-strikethrough-none">在這個 solid 的 children 裡面，再加一個 pose 跟一個 hinge joint，然後把這個 hinge joint 命名為 joint2。</span></p>
<p class="cvGsUA direction-ltr align-start para-style-body"><span class="OYPEnA font-feature-liga-off font-feature-clig-off font-feature-calt-off text-decoration-none text-strikethrough-none">然後 joint2 的處理方式跟剛剛 joint1 一樣：在 children 裡面新增一個 solid，接著加 pose（放在 box 的中心位置），再加一個 hinge joint，把它命名為 joint3，然後建立第三個 box。</span></p>
<p class="cvGsUA direction-ltr align-start para-style-body"><span class="OYPEnA font-feature-liga-off font-feature-clig-off font-feature-calt-off text-decoration-none text-strikethrough-none">這樣 box 的結構就完成了，接下來要來設定 jointParameters。</span></p>
<p class="cvGsUA direction-ltr align-start para-style-body"><span class="OYPEnA font-feature-liga-off font-feature-clig-off font-feature-calt-off text-decoration-none text-strikethrough-none">jointParameters 的重點是在設定關節相對於原點（0,0,0）的座標位置。舉例來說，如果 link1 的座標相對於原點是往負 X 移動 0.5 公尺，那 anchor 的 X 值就要設成 -0.5m。link2 跟 link3 的設法也是一樣的邏輯。</span></p>
<p class="cvGsUA direction-ltr align-start para-style-body"><span class="OYPEnA font-feature-liga-off font-feature-clig-off font-feature-calt-off text-decoration-none text-strikethrough-none">然後在 joint1 上加一個旋轉馬達，命名為 motor（這會用在後面的控制程式裡）。</span></p>
<p class="cvGsUA direction-ltr align-start para-style-body"><span class="OYPEnA font-feature-liga-off font-feature-clig-off font-feature-calt-off text-decoration-none text-strikethrough-none">最後一個步驟是幫 link1、link2、link3 建立 boundingObject，這個是用來定義物體的物理碰撞範圍的。</span></p>
<p></p>
<p><img alt="" height="106" src="/images/螢幕擷取畫面 2025-06-03 091421.png" width="221"/></p>
<p><img alt="" height="271" src="/images/螢幕擷取畫面 2025-06-03 091502.png" width="493"/></p>
<p><img alt="" height="252" src="/images/螢幕擷取畫面 2025-06-03 092004.png" width="571"/></p>
<p><img alt="" height="268" src="/images/螢幕擷取畫面 2025-06-03 091603.png" width="457"/></p>
<p><img alt="" height="198" src="/images/螢幕擷取畫面 2025-06-03 091631.png" width="576"/></p>
<p><img alt="" height="224" src="/images/螢幕擷取畫面 2025-06-03 091654.png" width="464"/></p>
<p><img alt="" height="259" src="/images/螢幕擷取畫面 2025-06-03 091733.png" width="505"/></p>
<p><img alt="" height="135" src="/images/螢幕擷取畫面 2025-06-03 091811.png" width="488"/></p>
<p><img alt="" height="204" src="/images/螢幕擷取畫面 2025-06-03 091826.png" width="431"/></p>
<p><img alt="" height="251" src="/images/螢幕擷取畫面 2025-06-03 091851.png" width="397"/></p>
<p><img alt="" height="282" src="/images/螢幕擷取畫面 2025-06-03 091910.png" width="443"/></p>
<p><img alt="" height="113" src="/images/螢幕擷取畫面 2025-06-03 092349.png" width="599"/></p>
<p><img alt="" height="94" src="/images/螢幕擷取畫面 2025-06-03 092611.png" width="558"/></p>
<p><img alt="" height="97" src="/images/螢幕擷取畫面 2025-06-03 092704.png" width="602"/></p>
<p></p>
<p><a href="/downloads/fourbar_controller.7z">fourbar_controller.7z</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from controller import Robot  # 從 Webots 控制器模組匯入 Robot 類別

def run_robot():
    # 建立 Robot 實例
    robot = Robot()

    # 獲取模擬的基本時間步長 (單位：毫秒)
    timestep = int(robot.getBasicTimeStep())

    # 取得名為 'motor' 的馬達裝置
    motor = robot.getDevice('motor')

    # 設定馬達為無限旋轉模式（連續轉動，不是轉到特定角度）
    motor.setPosition(float('inf'))

    # 設定馬達旋轉速度為 1.0 弧度/秒
    motor.setVelocity(1.0)

    # 主控制迴圈：只要模擬沒結束，就一直執行
    while robot.step(timestep) != -1:
        pass  # 目前不需要在每個時間步做額外的動作

# 如果此檔案是直接執行的，呼叫 run_robot() 函式
if __name__ == "__main__":
    run_robot()
</pre>
<p></p>
<p>心得：這是第一次使用webots，過程當中遇到超多問題，一開始是如何做設置、模擬程式導入許多問題，好險問同學之後慢慢地學會使用。</p>
<p></p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 學員學號</p>
<p></p><h2>HW2</h2>
<p>繪製檔案轉obj</p>
<p>檔案：<a href="/downloads/split_parts.7z">fourbar obj</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/DUMgoqvI5jU" width="560"></iframe></p>
<p></p>
<p>作業檔案：<a href="/downloads/fourbar webots.7z">fourbar webots.7z</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/lv79jDls2D0" width="560"></iframe></p>
<p>作業流程</p>
<p class="cvGsUA direction-ltr align-justify para-style-body"><span class="OYPEnA font-feature-liga-off font-feature-clig-off font-feature-calt-off text-decoration-none text-strikethrough-none">在solvespace繪製零件並將組裝好整個機構之後，先把檔案存起來，接著輸出一個 .stl 檔。</span></p>
<p class="cvGsUA direction-ltr align-justify para-style-body"><span class="OYPEnA font-feature-liga-off font-feature-clig-off font-feature-calt-off text-decoration-none text-strikethrough-none">然後用 split_stl_to_obj_scale2 這個工具把 .stl 轉成 .obj</span></p>
<p class="cvGsUA direction-ltr align-justify para-style-body"><span class="OYPEnA font-feature-liga-off font-feature-clig-off font-feature-calt-off text-decoration-none text-strikethrough-none">接下來進入 Webots後，先在場景裡加入一個 Robot 群組。</span></p>
<p class="cvGsUA direction-ltr align-justify para-style-body"><span class="OYPEnA font-feature-liga-off font-feature-clig-off font-feature-calt-off text-decoration-none text-strikethrough-none">在這個 Robot 裡的 children 加入兩個 Solid 當作是base，再加兩個 HingeJoint，其中一個命名成 joint1，另一個是 joint4。</span></p>
<p class="cvGsUA direction-ltr align-justify para-style-body"><span class="OYPEnA font-feature-liga-off font-feature-clig-off font-feature-calt-off text-decoration-none text-strikethrough-none">，再接下來的操作和 HW1 差不多，差別在於HW1的 box是用內建，而這次不是用內建的，而是使用自己在solvespace畫好的模型匯入。要將檔案匯入有兩種方式：第一個是用 CadShape 匯入 .obj，第二個是用 Shape -&gt; Mesh 來匯入。而我選擇Shape -&gt; Mesh，這樣比較方便調整顏色。</span></p>
<p></p>
<p><img alt="" height="339" src="/images/螢幕擷取畫面 2025-06-03 093922.png" width="468"/></p>
<p><img alt="" height="198" src="/images/螢幕擷取畫面 2025-06-03 093953.png" width="448"/></p>
<p><img alt="" height="226" src="/images/螢幕擷取畫面 2025-06-03 094023.png" width="456"/></p>
<p><img alt="" height="253" src="/images/螢幕擷取畫面 2025-06-03 094225.png" width="585"/></p>
<p><img alt="" height="293" src="/images/螢幕擷取畫面 2025-06-03 094408.png" width="489"/></p>
<p><img alt="" height="112" src="/images/螢幕擷取畫面 2025-06-03 094439.png" width="455"/></p>
<p><img alt="" height="259" src="/images/螢幕擷取畫面 2025-06-03 094500.png" width="398"/></p>
<p><img alt="" height="108" src="/images/螢幕擷取畫面 2025-06-03 094512.png" width="286"/></p>
<p><img alt="" height="206" src="/images/螢幕擷取畫面 2025-06-03 094542.png" width="419"/></p>
<p><img alt="" height="132" src="/images/螢幕擷取畫面 2025-06-03 094554.png" width="292"/></p>
<p><img alt="" height="130" src="/images/螢幕擷取畫面 2025-06-03 094613.png" width="359"/></p>
<p><img alt="" height="93" src="/images/螢幕擷取畫面 2025-06-03 094659.png" width="399"/></p>
<p><img alt="" height="96" src="/images/螢幕擷取畫面 2025-06-03 094724.png" width="390"/></p>
<p></p>
<p>心得：這次作業是使用自己所畫的圖檔，導入webots做使用，在這之前需要先將檔案會成obj，一開始我是使用<span class="OYPEnA font-feature-liga-off font-feature-clig-off font-feature-calt-off text-decoration-none text-strikethrough-none">solvespace直接匯出導入webots後，發現變超級大的，原來webots所使用的單位是m公尺，所以我們所繪製的圖與變成了m公尺，後來才得知是需要使用split_stl_to_obj_scale2 這個工具，轉出轉換單位的obj才得以解決。</span></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號</p>
<p></p><h2>HW3</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/2FHkLTmIFPo" width="560"></iframe></p>
<p></p>
<p><span>作業檔案：</span><a href="/downloads/basketball shoot webots.zip">basketball shoot webots.zip</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/0gJGNhaHbIg" width="560"></iframe></p>
<p>作業流程</p>
<p></p>
<p><span class="OYPEnA font-feature-liga-off font-feature-clig-off font-feature-calt-off text-decoration-none text-strikethrough-none">本次作業和HW2流程一樣，需要先將圖檔繪製好組裝好，並將檔案匯出成.obj，再進到webots做組裝，而這次比較特別別的是有增加一顆球和籃框，目標是要將開啟模擬時可以將球投入籃框。</span></p>
<p><img alt="" height="152" src="/images/螢幕擷取畫面 2025-06-03 095726.png" width="391"/></p>
<p><img alt="" height="370" src="/images/螢幕擷取畫面 2025-06-03 100321.png" width="451"/></p>
<p><img alt="" height="223" src="/images/螢幕擷取畫面 2025-06-03 095924.png" width="352"/></p>
<p><img alt="" height="184" src="/images/螢幕擷取畫面 2025-06-03 095950.png" width="316"/></p>
<p><img alt="" height="187" src="/images/螢幕擷取畫面 2025-06-03 100021.png" width="413"/></p>
<p><img alt="" height="180" src="/images/螢幕擷取畫面 2025-06-03 100052.png" width="347"/></p>
<p><img alt="" height="147" src="/images/螢幕擷取畫面 2025-06-03 100113.png" width="312"/></p>
<p><img alt="" height="202" src="/images/螢幕擷取畫面 2025-06-03 100127.png" width="273"/></p>
<p><img alt="" height="127" src="/images/螢幕擷取畫面 2025-06-03 101332.png" width="273"/></p>
<p><img alt="" height="197" src="/images/螢幕擷取畫面 2025-06-03 100156.png" width="351"/></p>
<p><img alt="" height="201" src="/images/螢幕擷取畫面 2025-06-03 100226.png" width="439"/></p>
<p><img alt="" height="89" src="/images/螢幕擷取畫面 2025-06-03 100407.png" width="335"/></p>
<p><img alt="" height="96" src="/images/螢幕擷取畫面 2025-06-03 101905.png" width="484"/></p>
<p><img alt="" height="292" src="/images/螢幕擷取畫面 2025-06-03 100459.png" width="450"/></p>
<p><img alt="" height="364" src="/images/螢幕擷取畫面 2025-06-03 100528.png" width="474"/></p>
<p>心得：這次的作業做起來相對於之前兩次順手，這次一樣是要先繪製、轉檔案再進入webots做操作，這次比較特別的就是多加了籃框和一顆球，而球的部分我一開始以為是要自己繪製，但後來再做設置的時候感覺怪怪的，詢問同學後才知道內建就有球體可做使用，害我還花時間去畫一顆球轉檔來用。</p>
<p></p>
<p>作業檔案：<a href="/downloads/basketball hoop webots.7z">basketball hoop webots.7z</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 從 Webots 的 controller 模組中導入 Robot 類別
from controller import Robot

# 定義主函式
def run_robot():
    # 建立一個 Robot 實例，用來與模擬中的機器人互動
    robot = Robot()

    # 取得模擬的基本時間步長（以毫秒為單位）
    timestep = int(robot.getBasicTimeStep())

    # 取得名為 'motor1' 的馬達裝置
    motor = robot.getDevice('motor1')

    # 取得鍵盤裝置，並啟用以便後續讀取輸入
    keyboard = robot.getKeyboard()
    keyboard.enable(timestep)  # 啟用鍵盤裝置，並設定掃描間隔為 timestep

    # 設定馬達的初始位置（此處未實際使用，但可作為預設值）
    initial_position = 0.0  # 假設初始位置為 0 弧度

    # 主要控制迴圈，每次迴圈會根據 timestep 推進模擬
    while robot.step(timestep) != -1:
        # 將馬達的位置設定為 38 度（轉換為弧度後設為目標位置）
        motor.setPosition(38 * 3.14159 / 180)

# 如果這個程式是主程式執行，則呼叫主函式
if __name__ == "__main__":
    run_robot()
</pre>
<p></p>
<p>作業檔案：<a href="/downloads/basketball shoot webots.zip">basketball shoot webots.zip</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 學員學號</p>
<p></p><h1>Midterm</h1>
<p>各週進度:<span>可攜更改python 313、學員名單、小組名單、四連桿繪製組裝</span></p>
<p>各週網頁內容:<a href="https://mdecd2025.github.io/hw-41223230/content/task1.html">task1</a>、<a href="https://mdecd2025.github.io/hw-41223230/content/list.html">task1 list</a>、<a href="https://mdecd2025.github.io/hw-41223230/content/task2.html">task2</a>、<a href="https://mdecd2025.github.io/hw-41223230/content/task4.html">task4</a></p>
<p>期中心得:上完九週的課程，個人覺得這門課比上一門課困難許多，而且目前作業進度落後，需要多加跟上。</p>
<p>期中自評影片</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/mzSeBFppqBg" width="560"></iframe></p>
<p></p>
<p style="padding-left: 30px;"></p>
<h1>Exam</h1>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p style="padding-left: 30px;">各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景 </p>
<p style="padding-left: 30px;">各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p style="padding-left: 30px;">各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站.</p>
<p style="padding-left: 30px;">協同分組方式:</p>
<ol>
<li>分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁.</li>
</ol>
<h2>Exam1</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/pbTT2thODIQ" width="560"></iframe></p>
<p></p>
<p>作業檔案：<a href="/downloads/exam1.7z">exam1</a></p>
<p>過程：<br/>1.首先我們在做exam1前要先去solvespace內畫出我們除了起始角30度以外的角度，繪畫完後得到我們link1為30度、limk2為41.79度、link3為130.6度。<br/>2.這三個角度轉為弳度為0.523599、0.729373、2.2794<br/>3.這次作業使用HW1的檔案下去做修改<br/>4.首先展開joint1裡面link1的rotation內的angle改為0.523599<br/>5.再來是展開joint2裡面link2的rotation內的angle改為0.724137<br/>6.最後展開joint3裡面link3的rotation內的angle改為2.2794<br/>7.回到link2的children，再加入一個pose，展開裡面的translation XYZ改為0.3、0.2、0；pose內children加入shape<br/>8.shape內的geometry加入box，將size XYZ改為0.1、0.3、0.1<br/>9.最後儲存，開啟模擬成功<br/>心得：<br/>這次的exam1，使用先前HW1下去做更改，一開始一個一找要更改的部分，前後約使用1個小時，然後成功後再錄影，錄完約6分鐘，完整地做完後對於整體架構又更加理解。</p>
<p></p>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 學員學號</p><h2>Exam2</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/-Ep97y43Vko" width="560"></iframe></p>
<p></p>
<p>考試檔案：<a href="/downloads/slvs.7z">slvs</a>、<a href="/downloads/webots.7z">webots</a></p>
<p>過程<br/>1.首先先計算主動桿改為1.30m時，固定桿和從動桿為多少；最後得出固定桿3.25m、從動桿為1.95m和2.925m<br/>2.依照這個尺寸在solvespace繪製線架構，並求出起始角以外的角度；<br/>3.繪製完線架構後，開始繪製新的shape，並進行組裝<br/>4.全部繪製、組裝完後，使用split_stl_to_obj_scale2.py這個程式去匯出obj<br/>5.結束後打開webots開始設置，流程和HW2一樣，完成後開啟模擬檢查是否正確<br/>心得<br/>在這次的作業讓我深深體會到第一步錯就會導致後面就全錯，由於一開始的線架構我將原點設置在中間，並不是設置在最左邊，所以導致在設置joint4的jointparameters內的anchor無法設置正確，最後只好重新繪製線架構和組裝在繪出新的obj再做一次，得以完成。</p>
<p></p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號</p><h2>Exam3</h2>
<p>Exam3-1</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/qYnA66lMfek" width="560"></iframe></p>
<p>Exam3-2</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/EdrX2_ALsAk" width="560"></iframe></p>
<p>Exam3-3</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/fOA3nyRczBc" width="560"></iframe></p>
<p></p>
<p>過程與心得</p>
<p>1.首先先到<a href="https://mde.tw/cd2025/content/IPv6.html">https://mde.tw/cd2025/content/IPv6.html</a>這個網頁找到自己的ipv6</p>
<p>2.到電腦控制台、網際網路、乙太網路、內容ipv6做更改</p>
<p>3.完成後打開cmd 打入<span>webot --stream  "檔案路徑\檔名.wbt</span></p>
<p><span>4.正確打開webots後，打開瀏覽器到<a href="http://localhost:1234/index.html網頁">http://localhost:1234/index.html</a></span></p>
<p><span>5.進入後先按connect，測試是否連上</span></p>
<p><span>6.成功連上後將上面改成ws://[自己的ipv6]:1234</span></p>
<p><span>7.成功連接上後，代表成功</span></p>
<p><span>心得</span></p>
<p><span>一開始看網頁上的敘述作業內容看的是一頭霧水，後來請教同學後才知道整個如何操作，這整個是透過<a href="http://localhost:1234/index.html%E7%B6%B2%E9%A0%81">http://localhost:1234/index.html</a> 這個網頁來達到串流。</span></p>
<p><span></span></p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號</p>
<h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明:</span></p>
<p><span>作業檔案：<a href="/downloads/final.7z">final.7z</a></span></p>
<p><span> shooter youbots</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/btS_oS0Yi3s" width="560"></iframe></span><span></span></p>
<p><span>supervisor Robots</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/35r1Lzf8CfI" width="560"></iframe></span><span></span></p>
<p><span>stand youbots</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/MEkjQxztVBk" width="560"></iframe></span></p>
<p><span></span></p>
<p><span> transform</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/N8mVPtXQk_4" width="560"></iframe></span></p>
<p><span></span></p>
<p><span>counter supervisor</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/QqPwNuadrq0" width="560"></iframe></span></p>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<h2>shooter youbots</h2>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from controller import Robot, Keyboard  # 匯入 Webots 控制所需的 Robot 和 Keyboard 類別

# 常數設定
TIME_STEP = 32  # 控制循環的時間間隔（毫秒）
MAX_VELOCITY = 10.0  # 車輪最大速度
ANGLE_STEP = 40 * 3.14159 / 180  # 將 40 度轉換為弧度（機構用角度）
POSITION_M = ANGLE_STEP          # 機構移動至 +40 度的位置
POSITION_K = 0.0                 # 機構移動至 0 度的位置

# 初始化機器人與鍵盤
robot = Robot()  # 創建 Robot 物件
timestep = int(robot.getBasicTimeStep())  # 取得機器人基礎時間步長
keyboard = Keyboard()  # 創建鍵盤物件
keyboard.enable(timestep)  # 啟用鍵盤偵測，使用相同時間步長

# 嘗試取得馬達與感測器裝置
try:
    motor = robot.getDevice('motor1')  # 取得名為 motor1 的馬達裝置
    sensor = robot.getDevice('motor1_sensor')  # 取得與馬達對應的感測器
    sensor.enable(timestep)  # 啟用感測器以讀取資料
    mechanism_enabled = True  # 成功取得裝置，啟用機構控制
except Exception:
    mechanism_enabled = False  # 若出錯（裝置不存在），則停用機構功能

# 嘗試取得車輪裝置
try:
    wheels = [robot.getDevice(f"wheel{i+1}") for i in range(4)]  # 取得四個車輪裝置
    for wheel in wheels:
        wheel.setPosition(float('inf'))  # 設為無限位置，開啟速度控制模式
        wheel.setVelocity(0)  # 初始速度設為 0
    platform_enabled = True  # 若成功取得裝置，啟用平台控制
except Exception:
    platform_enabled = False  # 若取得失敗，停用平台功能

# 狀態機初始狀態：允許按 F 鍵動作
current_state = "allow_f"

# 記錄按鍵是否已被按下，用於去彈跳（避免重複觸發）
key_pressed = {
    'v': False,  # 記錄 V 鍵是否被按下
    'f': False   # 記錄 F 鍵是否被按下
}

# 主循環，重複執行直到模擬結束
while robot.step(timestep) != -1:
    key = keyboard.getKey()  # 讀取目前按下的鍵

    # 平台控制（移動用輪子）
    if platform_enabled:
        if key == Keyboard.UP:
            for wheel in wheels:
                wheel.setVelocity(MAX_VELOCITY)  # 所有輪子向前
        elif key == Keyboard.DOWN:
            for wheel in wheels:
                wheel.setVelocity(-MAX_VELOCITY)  # 所有輪子向後
        elif key == Keyboard.LEFT:
            # 左轉（左右輪反方向旋轉）
            wheels[0].setVelocity(MAX_VELOCITY)
            wheels[1].setVelocity(-MAX_VELOCITY)
            wheels[2].setVelocity(MAX_VELOCITY)
            wheels[3].setVelocity(-MAX_VELOCITY)
        elif key == Keyboard.RIGHT:
            # 右轉（左右輪反方向旋轉）
            wheels[0].setVelocity(-MAX_VELOCITY)
            wheels[1].setVelocity(MAX_VELOCITY)
            wheels[2].setVelocity(-MAX_VELOCITY)
            wheels[3].setVelocity(MAX_VELOCITY)
        elif key == ord('Q') or key == ord('q'):
            print("Exiting...")  # 按 Q 結束程式
            break
        else:
            for wheel in wheels:
                wheel.setVelocity(0)  # 沒有方向鍵按下時停止移動

    # 馬達控制（用 F / V 鍵操作）
    if mechanism_enabled:
        _current_motor_position = sensor.getValue()  # 讀取馬達目前位置（可用於除錯）

        # 按下 F 鍵時，若允許且尚未按住，讓馬達轉到 +40 度
        if key == ord('F') or key == ord('f'):
            if not key_pressed['f'] and current_state == "allow_f":
                motor.setPosition(POSITION_M)  # 馬達移動至 +40 度
                current_state = "allow_v"  # 下一次只能按 V
            key_pressed['f'] = True  # 標記 F 鍵已按
        else:
            key_pressed['f'] = False  # F 鍵已放開

        # 按下 V 鍵時，若允許且尚未按住，讓馬達轉回 0 度
        if key == ord('V') or key == ord('v'):
            if not key_pressed['v'] and current_state == "allow_v":
                motor.setPosition(POSITION_K)  # 馬達移動至 0 度
                current_state = "allow_f"  # 下一次只能按 F
            key_pressed['v'] = True  # 標記 V 鍵已按
        else:
            key_pressed['v'] = False  # V 鍵已放開
</pre>
<p><span></span></p>
<p><span>在原本的城市當中是以M和K作為發射和回復，但我個人覺得有點不習慣，所以就改成了F和V</span></p><h2>supervisor Robots</h2>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from controller import Supervisor, Keyboard  # 匯入 Webots 的 Supervisor 和鍵盤控制模組
import time                                   # 匯入時間模組，用於記錄與計時
import random                                 # 匯入隨機模組，用於顏色和命名
import numpy as np                            # 匯入 NumPy，用來處理向量運算
import re                                     # 匯入正規表達式模組，用來比對 DEF 名稱

# ----------------- 參數區 -----------------
HOOP_CENTER = [0.622, -0.103, 0.742838]       # 籃框中心座標
BALL_DEF_PATTERN = re.compile(r"Sphere_\d+")  # 比對球的 DEF 名稱用的正則表達式

supervisor = Supervisor()                     # 建立 Webots 的 Supervisor 實例
timestep = int(supervisor.getBasicTimeStep()) # 取得模擬時間步長
keyboard = Keyboard()                         # 建立鍵盤控制實例
keyboard.enable(timestep)                     # 啟用鍵盤，並設定更新頻率為 timestep

# 球與軌跡點設定
sphere_radius = 0.1
TRAJECTORY_POINT_RADIUS = 0.03                # 軌跡球的半徑
TRAJECTORY_POINT_STEP = 0.12                  # 軌跡點之間的最小距離
TRAJECTORY_MAX_POINTS = 5                     # 最多顯示5個軌跡點

# 狀態變數初始化
waiting_ball_def = None                       # 等待發射的球的 DEF 名稱
waiting_ball_info = None                      # 等待發射球的資訊（位置與顏色）
last_key_time = 0                             # 上一次按鍵時間（防止重複觸發）
debounce_time = 0.5                           # 按鍵去彈時間（秒）
default_feed_pos = (-0.35, 0.0, 0.9)           # 新球產生時的相對位置
PRINT_INTERVAL = 0.2                          # 球座標輸出間隔

current_tracked_def = None                    # 目前追蹤的球 DEF 名稱
last_print_time = time.time()                 # 上次輸出時間

trajectory_points = []                        # 保存目前的軌跡點 [(位置, def名稱)] 最多5個

# ----------------- 函式定義 -----------------

# 將軸角轉換為旋轉矩陣（用於從 local 座標轉為 world 座標）
def axis_angle_to_rotation_matrix(axis, angle):
    x, y, z = axis
    c = np.cos(angle)
    s = np.sin(angle)
    C = 1 - c
    return np.array([
        [x*x*C + c,   x*y*C - z*s, x*z*C + y*s],
        [y*x*C + z*s, y*y*C + c,   y*z*C - x*s],
        [z*x*C - y*s, z*y*C + x*s, z*z*C + c]
    ])

# 產生獨一無二的球名稱（根據時間戳與亂數）
def generate_valid_def_name(base_name="Sphere"):
    timestamp = int(supervisor.getTime() * 1000)
    return f"{base_name}_{timestamp}_{random.randint(0, 10000)}"

# 產生隨機 RGB 顏色
def generate_random_color():
    return random.random(), random.random(), random.random()

# 將 youbot 上的 local 座標轉成 world 座標
def youbot_local_to_world(local_pos):
    youbot_node = supervisor.getFromDef('youbot')
    if youbot_node is None:
        raise RuntimeError("找不到 DEF 為 youbot 的 Robot 物件")
    youbot_translation = np.array(youbot_node.getField('translation').getSFVec3f())
    youbot_rotation = youbot_node.getField('rotation').getSFRotation()
    youbot_axis = youbot_rotation[:3]
    youbot_angle = youbot_rotation[3]
    youbot_rot_mat = axis_angle_to_rotation_matrix(youbot_axis, youbot_angle)
    rotated = youbot_rot_mat @ np.array(local_pos)
    world_pos = youbot_translation + rotated
    return tuple(world_pos)

# 建立靜止球（不含物理）
def create_static_ball(def_name, world_pos, r, g, b):
    sphere_string = f"""
    DEF {def_name} Solid {{
      translation {world_pos[0]} {world_pos[1]} {world_pos[2]}
      contactMaterial "ball"
      children [
        Shape {{
          geometry Sphere {{
            radius {sphere_radius}
          }}
          appearance Appearance {{
            material Material {{
              diffuseColor {r} {g} {b}
            }}
          }}
        }}
      ]
      boundingObject Sphere {{
        radius {sphere_radius}
      }}
    }}
    """
    root = supervisor.getRoot()
    children_field = root.getField("children")
    children_field.importMFNodeFromString(-1, sphere_string)

# 建立動態球（可以被物理模擬推動）
def create_dynamic_ball(def_name, world_pos, r, g, b):
    sphere_string = f"""
    DEF {def_name} Solid {{
      translation {world_pos[0]} {world_pos[1]} {world_pos[2]}
      contactMaterial "ball"
      children [
        Shape {{
          geometry Sphere {{
            radius {sphere_radius}
          }}
          appearance Appearance {{
            material Material {{
              diffuseColor {r} {g} {b}
            }}
          }}
        }}
      ]
      boundingObject Sphere {{
        radius {sphere_radius}
      }}
      physics Physics {{
        mass 0.01
        density -1
      }}
    }}
    """
    root = supervisor.getRoot()
    children_field = root.getField("children")
    children_field.importMFNodeFromString(-1, sphere_string)

# 建立軌跡小球作為可視化記號（Transform + Shape，無物理）
def create_trajectory_point(pos):
    def_name = generate_valid_def_name("TrajectoryPt")
    sphere_string = f"""
    DEF {def_name} Transform {{
      translation {pos[0]} {pos[1]} {pos[2]}
      children [
        Shape {{
          geometry Sphere {{
            radius {TRAJECTORY_POINT_RADIUS}
          }}
          appearance Appearance {{
            material Material {{
              diffuseColor 1 0.7 0
              transparency 0.3
            }}
          }}
        }}
      ]
    }}
    """
    root = supervisor.getRoot()
    children_field = root.getField("children")
    children_field.importMFNodeFromString(-1, sphere_string)
    return def_name

# 刪除目前所有軌跡點
def delete_trajectory_points():
    global trajectory_points
    for _, def_name in trajectory_points:
        node = supervisor.getFromDef(def_name)
        if node:
            node.remove()
    trajectory_points.clear()

# 建立一顆靜止球（並儲存它的資訊）
def create_static_sphere(supervisor, x, y, z):
    global waiting_ball_def, waiting_ball_info
    def_name = generate_valid_def_name()
    waiting_ball_def = def_name
    r, g, b = generate_random_color()
    world_pos = youbot_local_to_world((x, y, z))
    waiting_ball_info = (world_pos, r, g, b)
    create_static_ball(def_name, world_pos, r, g, b)

# 將靜止球移除並改為物理球
def activate_dynamic_ball():
    global waiting_ball_def, waiting_ball_info
    if waiting_ball_def is None or waiting_ball_info is None:
        return
    ball_node = supervisor.getFromDef(waiting_ball_def)
    if ball_node is not None:
        ball_node.remove()
        supervisor.step(int(supervisor.getBasicTimeStep()))
    world_pos, r, g, b = waiting_ball_info
    create_dynamic_ball(waiting_ball_def, world_pos, r, g, b)
    waiting_ball_def = None
    waiting_ball_info = None

# 判斷球是否落地（以 z 軸高度為依據）
def is_ball_landed(pos, threshold_z=0.13):
    return pos[2] &lt; threshold_z

# ----------------- 主迴圈 -----------------

print("按 R 產生一顆靜止球，按 F 讓球變 dynamic 可擊出（最多只有5個軌跡點跟著球跑，球落地後軌跡自動消失）")

while supervisor.step(timestep) != -1:
    key = keyboard.getKey()
    current_time = time.time()

    # 按 R 鍵產生一顆靜止球
    if key == ord('R') and (current_time - last_key_time &gt;= debounce_time):
        if waiting_ball_def is None:
            create_static_sphere(supervisor, *default_feed_pos)
            current_tracked_def = waiting_ball_def
            delete_trajectory_points()
        else:
            print("還有一顆球等待擊出，請先擊出再產生新球。")
        last_key_time = current_time

    # 按 F 鍵讓球變成可被物理推動（Dynamic）
    if key == ord('F') and (current_time - last_key_time &gt;= debounce_time):
        activate_dynamic_ball()
        last_key_time = current_time

    # 若目前有追蹤的球，就更新軌跡顯示與落地檢查
    if current_tracked_def is not None:
        ball_node = supervisor.getFromDef(current_tracked_def)
        if ball_node is not None:
            pos = ball_node.getPosition()
            if current_time - last_print_time &gt;= PRINT_INTERVAL:
                # print(f"球 {current_tracked_def} 絕對座標: [{pos[0]:.4f}, {pos[1]:.4f}, {pos[2]:.4f}]")
                last_print_time = current_time

            # 若與上一個軌跡點距離足夠遠，新增新的軌跡點
            if (not trajectory_points) or np.linalg.norm(np.array(pos) - np.array(trajectory_points[-1][0])) &gt; TRAJECTORY_POINT_STEP:
                def_name = create_trajectory_point(pos)
                trajectory_points.append((pos, def_name))
                if len(trajectory_points) &gt; TRAJECTORY_MAX_POINTS:
                    _, old_def = trajectory_points.pop(0)
                    node = supervisor.getFromDef(old_def)
                    if node:
                        node.remove()

            # 若球落地，刪除軌跡
            if is_ball_landed(pos):
                delete_trajectory_points()
        else:
            delete_trajectory_points()
            current_tracked_def = None
</pre>
<p><span></span></p>
<p><span>在這程式當中我將原本的A鍵給球變成R鍵給球，然後還有先前的shooter youbots的發射鍵改成F，所以在這邊的M也需要改成F，以免在原本執行上出問題。</span></p><h2>stand youbots</h2>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from controller import Robot, Keyboard  # 匯入 Webots 提供的 Robot 與 Keyboard 類別

# 常數定義
WHEEL_RADIUS = 0.1  # 輪子的半徑（單位：公尺），此處為 10 公分
L = 0.471  # 機器人長度的一半（用於動力學計算）
W = 0.376  # 機器人寬度的一半
MAX_VELOCITY = 10.0  # 輪子的最大速度（單位：rad/s）

# 初始化機器人實體
robot = Robot()

# 取得模擬的時間步長（time step）
timestep = int(robot.getBasicTimeStep())

# 取得發射器裝置，用於傳送分數（與其他模組或裝置通訊）
emitter = robot.getDevice("score_emitter")

score_to_send = 2  # 每次感測成功後加分數，這裡設為 2 分，可自行調整

# 初始化距離感測器（距離球進入感測區的偵測裝置）
sensor = robot.getDevice('sensor')  # 取得感測器裝置
sensor.enable(timestep)  # 啟用感測器並設定刷新速率

score = 0  # 初始分數
last_score_time = 0  # 上一次得分的時間
cooldown = 1.0  # 冷卻時間（秒），防止重複計分

# 初始化鍵盤控制器
keyboard = Keyboard()
keyboard.enable(timestep)  # 啟用鍵盤偵測並設定刷新速率

# 取得四個馬達裝置（四輪全驅）
wheel5 = robot.getDevice("wheel5")  # 前右輪
wheel6 = robot.getDevice("wheel6")  # 前左輪
wheel7 = robot.getDevice("wheel7")  # 後右輪
wheel8 = robot.getDevice("wheel8")  # 後左輪

# 設定輪子為速度控制模式（inf 表示不限制旋轉角度）
for wheel in [wheel5, wheel6, wheel7, wheel8]:
    wheel.setPosition(float('inf'))  # 設定為速度控制（非位置控制）
    wheel.setVelocity(0)  # 初始速度為 0（靜止）

# 定義控制四個輪子速度的函式
def set_wheel_velocity(v1, v2, v3, v4):
    """設定每個輪子的速度"""
    wheel5.setVelocity(v1)
    wheel6.setVelocity(v2)
    wheel7.setVelocity(v3)
    wheel8.setVelocity(v4)

# 將感測器AD值對應到距離的查表函式（線性插值）
lookup_table = [
    (1000, 0.00),
    (620, 0.12),
    (372, 0.13),
    (248, 0.14),
    (186, 0.15),
    (0, 0.18)
]

# 根據感測器的AD值推算實際距離（單位：公尺）
def ad_to_distance(ad_value):
    # AD 值遞減時表示距離遞增（感測器邏輯）
    for i in range(len(lookup_table)-1):
        a0, d0 = lookup_table[i]
        a1, d1 = lookup_table[i+1]
        if a1 &lt;= ad_value &lt;= a0:
            # 線性插值公式：在 a0 和 a1 之間計算距離值
            return d0 + (d1 - d0) * (ad_value - a0) / (a1 - a0)
    # 若超出表格範圍則回傳邊界值
    if ad_value &gt; lookup_table[0][0]:
        return lookup_table[0][1]
    return lookup_table[-1][1]

# 主迴圈開始，負責持續讀取感測器與鍵盤輸入
print("Use 'W', 'S', 'A', 'D' keys to control the robot.")
print("W: Move forward, S: Move backward, A: Turn left, D: Turn right.")
print("Press 'Q' to quit.")

while robot.step(timestep) != -1:  # 每次時間步進（直到模擬結束）

    key = keyboard.getKey()  # 讀取目前按下的鍵

    # 讀取距離感測器數值
    sensor_value = sensor.getValue()
    distance = ad_to_distance(sensor_value)  # 轉換成距離（公尺）

    current_time = robot.getTime()  # 取得當前模擬時間

    # 如果按下 F 鍵，印出目前距離（除錯用）
    if key == ord('F') or key == ord('f'):
        print(distance)

    # 如果按下 V 鍵，也印出距離（除錯用）
    if key == ord('V') or key == ord('v'):
        print(distance)

    # 若感測距離小於 0.11 公尺，且超過冷卻時間，則加分
    if distance &lt; 0.11 and (current_time - last_score_time) &gt; cooldown:
        score += 2
        print("得分")  # 顯示得分訊息
        print(distance)  # 顯示當前距離
        emitter.send(str(score_to_send).encode('utf-8'))  # 傳送分數給外部（如顯示器）

        last_score_time = current_time  # 更新上次得分時間

    # 根據按鍵控制輪子移動方向
    if key == ord('S') or key == ord('w'):
        # 前進
        velocity = MAX_VELOCITY
        set_wheel_velocity(velocity, velocity, velocity, velocity)
    elif key == ord('W') or key == ord('s'):
        # 後退
        velocity = -MAX_VELOCITY
        set_wheel_velocity(velocity, velocity, velocity, velocity)
    elif key == ord('D') or key == ord('d'):
        # 右轉：左輪前進，右輪後退
        velocity = MAX_VELOCITY
        set_wheel_velocity(-velocity, velocity, -velocity, velocity)
    elif key == ord('A') or key == ord('a'):
        # 左轉：左輪後退，右輪前進
        velocity = MAX_VELOCITY
        set_wheel_velocity(velocity, -velocity, velocity, -velocity)
    elif key == ord('Q') or key == ord('q'):
        # 離開程式
        print("Exiting...")
        break
    else:
        # 沒有按鍵時停止移動
        set_wheel_velocity(0, 0, 0, 0)
</pre>
<p><span></span></p>
<p><span>我將原本控制第二台車的按鍵EDSX 改成遊戲常用的WDAS，這樣是能讓移動上更加直覺。</span></p><h2>counter supervisor</h2>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from controller import Supervisor

# 七段顯示器每個數字對應的亮燈狀態（a-g段）
SEGMENTS = [
    [1,1,1,1,1,1,0], # 0
    [0,1,1,0,0,0,0], # 1
    [1,1,0,1,1,0,1], # 2
    [1,1,1,1,0,0,1], # 3
    [0,1,1,0,0,1,1], # 4
    [1,0,1,1,0,1,1], # 5
    [1,0,1,1,1,1,1], # 6
    [1,1,1,0,0,0,0], # 7
    [1,1,1,1,1,1,1], # 8
    [1,1,1,1,0,1,1], # 9
]

# 各個數字位數（百、十、個）對應的材質名稱（a-g 段）
DIGIT_MATERIALS = [
    ['a3mat', 'b3mat', 'c3mat', 'd3mat', 'e3mat', 'f3mat', 'g3mat'], # 百位
    ['a2mat', 'b2mat', 'c2mat', 'd2mat', 'e2mat', 'f2mat', 'g2mat'], # 十位
    ['a1mat', 'b1mat', 'c1mat', 'd1mat', 'e1mat', 'f1mat', 'g1mat'], # 個位
]

# 定義亮燈的顏色 (綠色)
ON_COLOR = [0, 1, 0]

# 定義熄燈的顏色 (深灰)
OFF_COLOR = [0.05, 0.05, 0.05]

# 設定某一個位數的顯示數字
def set_digit(supervisor, digit_index, value):
    segs = SEGMENTS[value]  # 取得該數字對應的七段顯示狀態
    for i, seg_on in enumerate(segs):
        # 根據 digit_index 取得該段的材質節點
        mat_node = supervisor.getFromDef(DIGIT_MATERIALS[digit_index][i])
        if mat_node:
            # 設定段的顏色：亮或暗
            mat_node.getField('diffuseColor').setSFColor(ON_COLOR if seg_on else OFF_COLOR)
        else:
            print(f"找不到 {DIGIT_MATERIALS[digit_index][i]} 這個DEF")  # 找不到對應 DEF 時輸出錯誤

# 設定整個顯示器顯示的數字（最多 3 位數）
def set_display(supervisor, value):
    value = max(0, min(999, int(value)))  # 限制數值在 0~999 範圍
    h = value // 100                     # 百位
    t = (value // 10) % 10               # 十位
    u = value % 10                       # 個位
    set_digit(supervisor, 0, h)          # 設定百位數字
    set_digit(supervisor, 1, t)          # 設定十位數字
    set_digit(supervisor, 2, u)          # 設定個位數字

# 建立 Supervisor 實例
supervisor = Supervisor()

# 取得 Webots 中設定的基本時間步長
timestep = int(supervisor.getBasicTimeStep())

# 初始分數為 0
score = 0

# 取得名為 "score_receiver" 的裝置（接收分數訊息）
receiver = supervisor.getDevice("score_receiver")
receiver.enable(timestep)  # 啟用接收器，並以 timestep 為更新間隔

# 主迴圈，每個時間步執行一次
while supervisor.step(timestep) != -1:
    # 當接收器中有資料時
    while receiver.getQueueLength() &gt; 0:
        data = receiver.getString()  # 取得接收到的字串資料
        if data.isdigit():           # 檢查是否是數字字串
            try:
                received_score = int(data)  # 將字串轉成整數
                score += received_score     # 累加到總分
                print(f"收到得分訊息: +{received_score}, 總分: {score}")  # 印出訊息
            except Exception as e:
                print("訊息格式錯誤:", e)  # 如果轉換錯誤，顯示錯誤訊息
        receiver.nextPacket()  # 移至下一筆封包
    set_display(supervisor, score)  # 更新七段顯示器的分數顯示
</pre>
<p></p>
<p></p><h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>