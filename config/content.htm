<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>學員作業網站: <a class="Link--inTextBlock" href="https://mdecd2025.github.io/hw-41223230/">https://mdecd2025.github.io/hw-41223230/</a></p>
<p>學員作業倉儲: https://github.com/mdecd2025/hw-41223230</p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<h2>repo</h2>
<h1>Tasks</h1>
<h2>task1</h2>
<p>將上學期舊版的python 311 更改為python 313，以利之後使用<span>新版的 SciTE, Portablegit, PUTTY, ShareX, Wink 以及原有的 tmp 及 home_ipv6, 以另存新的</span><span> start.bat</span><span> </span><span>啟動</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/X7X6ZT_ccvA" width="560"></iframe></span></p>
<h3>list</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document, ajax  # 從 Brython 的 browser 模組匯入 html、document 和 ajax，方便操作 DOM 和發送請求

url = "https://mde.tw/list/2b.txt"  # 要讀取的文字檔網址（學員清單）

# 定義當 AJAX 請求完成時要執行的函式
def on_complete(req):
    if req.status == 200:  # 如果請求成功（狀態碼 200）
        data = req.text.splitlines()  # 取得文字內容並按行分割成清單
        all_stud = data[1:]  # 去除第一行標題，只保留學生資料

        # 建立一個無序清單 (UL) 元素
        stud_list = html.UL()

        # 逐行處理每位學生的資料
        for stud in all_stud:
            fields = stud.split()  # 假設每行資料用空白分隔，將其分割成清單
            if len(fields) &gt;= 2:  # 確保至少有兩個欄位（學號和帳號）
                stud_id, account = fields[:2]  # 取得學號與帳號
                link = f"https://github.com/mde2025/hw-{stud_id}"  # 組合 GitHub 作業連結

                # 創建一個清單項目 (LI)，包含帳號和超連結
                stud_list &lt;= html.LI([
                    f"{account} - ",  # 顯示帳號
                    html.A(link, href=link, target="_blank")  # 超連結指向 GitHub 作業頁面，另開新視窗
                ])

        # 將總人數與名單插入至網頁指定區塊中
        document["brython_div1"] &lt;= html.P(f"總共有 {len(all_stud)} 名學員")  # 顯示總人數
        document["brython_div1"] &lt;= stud_list  # 顯示整個清單

    else:
        # 若請求失敗，顯示錯誤訊息
        document["brython_div1"] &lt;= html.P("無法取得資料")

# 發送 AJAX 請求，並設定完成後執行的函式
ajax.get(url, oncomplete=on_complete)
</pre>
<p></p>
<p>執行名單(64位學員)</p>
<div id="brython_div1">
<ul>
<li>a40923137 -<span> </span><a href="https://github.com/mde2025/hw-40923137" target="_blank">https://github.com/mde2025/hw-40923137</a></li>
<li>41023114 -<span> </span><a href="https://github.com/mde2025/hw-41023114" target="_blank">https://github.com/mde2025/hw-41023114</a></li>
<li>c-ching -<span> </span><a href="https://github.com/mde2025/hw-41023205" target="_blank">https://github.com/mde2025/hw-41023205</a></li>
<li>tseYU000 -<span> </span><a href="https://github.com/mde2025/hw-41023206" target="_blank">https://github.com/mde2025/hw-41023206</a></li>
<li>junpig10 -<span> </span><a href="https://github.com/mde2025/hw-41023210" target="_blank">https://github.com/mde2025/hw-41023210</a></li>
<li>41023213 -<span> </span><a href="https://github.com/mde2025/hw-41023213" target="_blank">https://github.com/mde2025/hw-41023213</a></li>
<li>41023215 -<span> </span><a href="https://github.com/mde2025/hw-41023215" target="_blank">https://github.com/mde2025/hw-41023215</a></li>
<li>41023216 -<span> </span><a href="https://github.com/mde2025/hw-41023216" target="_blank">https://github.com/mde2025/hw-41023216</a></li>
<li>snowfall-killer -<span> </span><a href="https://github.com/mde2025/hw-41023218" target="_blank">https://github.com/mde2025/hw-41023218</a></li>
<li>YUN4 -<span> </span><a href="https://github.com/mde2025/hw-41023232" target="_blank">https://github.com/mde2025/hw-41023232</a></li>
<li>www000123 -<span> </span><a href="https://github.com/mde2025/hw-41023237" target="_blank">https://github.com/mde2025/hw-41023237</a></li>
<li>41071202 -<span> </span><a href="https://github.com/mde2025/hw-41071202" target="_blank">https://github.com/mde2025/hw-41071202</a></li>
<li>41071203 -<span> </span><a href="https://github.com/mde2025/hw-41071203" target="_blank">https://github.com/mde2025/hw-41071203</a></li>
<li>41071204 -<span> </span><a href="https://github.com/mde2025/hw-41071204" target="_blank">https://github.com/mde2025/hw-41071204</a></li>
<li>41223201 -<span> </span><a href="https://github.com/mde2025/hw-41223201" target="_blank">https://github.com/mde2025/hw-41223201</a></li>
<li>41223202 -<span> </span><a href="https://github.com/mde2025/hw-41223202" target="_blank">https://github.com/mde2025/hw-41223202</a></li>
<li>41223203 -<span> </span><a href="https://github.com/mde2025/hw-41223203" target="_blank">https://github.com/mde2025/hw-41223203</a></li>
<li>41223205 -<span> </span><a href="https://github.com/mde2025/hw-41223205" target="_blank">https://github.com/mde2025/hw-41223205</a></li>
<li>41223206 -<span> </span><a href="https://github.com/mde2025/hw-41223206" target="_blank">https://github.com/mde2025/hw-41223206</a></li>
<li>emma0312 -<span> </span><a href="https://github.com/mde2025/hw-41223207" target="_blank">https://github.com/mde2025/hw-41223207</a></li>
<li>41223208-hw -<span> </span><a href="https://github.com/mde2025/hw-41223208" target="_blank">https://github.com/mde2025/hw-41223208</a></li>
<li>41223209 -<span> </span><a href="https://github.com/mde2025/hw-41223209" target="_blank">https://github.com/mde2025/hw-41223209</a></li>
<li>41223211 -<span> </span><a href="https://github.com/mde2025/hw-41223211" target="_blank">https://github.com/mde2025/hw-41223211</a></li>
<li>jjjay41223212 -<span> </span><a href="https://github.com/mde2025/hw-41223212" target="_blank">https://github.com/mde2025/hw-41223212</a></li>
<li>RAY41223215 -<span> </span><a href="https://github.com/mde2025/hw-41223215" target="_blank">https://github.com/mde2025/hw-41223215</a></li>
<li>41223216 -<span> </span><a href="https://github.com/mde2025/hw-41223216" target="_blank">https://github.com/mde2025/hw-41223216</a></li>
<li>41223217 -<span> </span><a href="https://github.com/mde2025/hw-41223217" target="_blank">https://github.com/mde2025/hw-41223217</a></li>
<li>41223218 -<span> </span><a href="https://github.com/mde2025/hw-41223218" target="_blank">https://github.com/mde2025/hw-41223218</a></li>
<li>41223219 -<span> </span><a href="https://github.com/mde2025/hw-41223219" target="_blank">https://github.com/mde2025/hw-41223219</a></li>
<li>ljg41223220 -<span> </span><a href="https://github.com/mde2025/hw-41223220" target="_blank">https://github.com/mde2025/hw-41223220</a></li>
<li>leeshaowei0716 -<span> </span><a href="https://github.com/mde2025/hw-41223221" target="_blank">https://github.com/mde2025/hw-41223221</a></li>
<li>41223222 -<span> </span><a href="https://github.com/mde2025/hw-41223222" target="_blank">https://github.com/mde2025/hw-41223222</a></li>
<li>linryan23 -<span> </span><a href="https://github.com/mde2025/hw-41223223" target="_blank">https://github.com/mde2025/hw-41223223</a></li>
<li>41223224 -<span> </span><a href="https://github.com/mde2025/hw-41223224" target="_blank">https://github.com/mde2025/hw-41223224</a></li>
<li>41223225 -<span> </span><a href="https://github.com/mde2025/hw-41223225" target="_blank">https://github.com/mde2025/hw-41223225</a></li>
<li>41223226-0 -<span> </span><a href="https://github.com/mde2025/hw-41223226" target="_blank">https://github.com/mde2025/hw-41223226</a></li>
<li>41223227 -<span> </span><a href="https://github.com/mde2025/hw-41223227" target="_blank">https://github.com/mde2025/hw-41223227</a></li>
<li>hyy41223228 -<span> </span><a href="https://github.com/mde2025/hw-41223228" target="_blank">https://github.com/mde2025/hw-41223228</a></li>
<li>41223229 -<span> </span><a href="https://github.com/mde2025/hw-41223229" target="_blank">https://github.com/mde2025/hw-41223229</a></li>
<li>41223230 -<span> </span><a href="https://github.com/mde2025/hw-41223230" target="_blank">https://github.com/mde2025/hw-41223230</a></li>
<li>41223231 -<span> </span><a href="https://github.com/mde2025/hw-41223231" target="_blank">https://github.com/mde2025/hw-41223231</a></li>
<li>41223232 -<span> </span><a href="https://github.com/mde2025/hw-41223232" target="_blank">https://github.com/mde2025/hw-41223232</a></li>
<li>41223233even -<span> </span><a href="https://github.com/mde2025/hw-41223233" target="_blank">https://github.com/mde2025/hw-41223233</a></li>
<li>41223234 -<span> </span><a href="https://github.com/mde2025/hw-41223234" target="_blank">https://github.com/mde2025/hw-41223234</a></li>
<li>41223235 -<span> </span><a href="https://github.com/mde2025/hw-41223235" target="_blank">https://github.com/mde2025/hw-41223235</a></li>
<li>41223236 -<span> </span><a href="https://github.com/mde2025/hw-41223236" target="_blank">https://github.com/mde2025/hw-41223236</a></li>
<li>Cloud41223237 -<span> </span><a href="https://github.com/mde2025/hw-41223237" target="_blank">https://github.com/mde2025/hw-41223237</a></li>
<li>WeihHuang -<span> </span><a href="https://github.com/mde2025/hw-41223239" target="_blank">https://github.com/mde2025/hw-41223239</a></li>
<li>ych0227 -<span> </span><a href="https://github.com/mde2025/hw-41223240" target="_blank">https://github.com/mde2025/hw-41223240</a></li>
<li>41223242 -<span> </span><a href="https://github.com/mde2025/hw-41223242" target="_blank">https://github.com/mde2025/hw-41223242</a></li>
<li>41223243 -<span> </span><a href="https://github.com/mde2025/hw-41223243" target="_blank">https://github.com/mde2025/hw-41223243</a></li>
<li>Liu41223244 -<span> </span><a href="https://github.com/mde2025/hw-41223244" target="_blank">https://github.com/mde2025/hw-41223244</a></li>
<li>41223245 -<span> </span><a href="https://github.com/mde2025/hw-41223245" target="_blank">https://github.com/mde2025/hw-41223245</a></li>
<li>41223246 -<span> </span><a href="https://github.com/mde2025/hw-41223246" target="_blank">https://github.com/mde2025/hw-41223246</a></li>
<li>CYC41223247 -<span> </span><a href="https://github.com/mde2025/hw-41223247" target="_blank">https://github.com/mde2025/hw-41223247</a></li>
<li>41223248 -<span> </span><a href="https://github.com/mde2025/hw-41223248" target="_blank">https://github.com/mde2025/hw-41223248</a></li>
<li>41223249 -<span> </span><a href="https://github.com/mde2025/hw-41223249" target="_blank">https://github.com/mde2025/hw-41223249</a></li>
<li>timluo123 -<span> </span><a href="https://github.com/mde2025/hw-41223250" target="_blank">https://github.com/mde2025/hw-41223250</a></li>
<li>41223251 -<span> </span><a href="https://github.com/mde2025/hw-41223251" target="_blank">https://github.com/mde2025/hw-41223251</a></li>
<li>supowen -<span> </span><a href="https://github.com/mde2025/hw-41223252" target="_blank">https://github.com/mde2025/hw-41223252</a></li>
<li>jacky93111 -<span> </span><a href="https://github.com/mde2025/hw-41223253" target="_blank">https://github.com/mde2025/hw-41223253</a></li>
<li>41271237 -<span> </span><a href="https://github.com/mde2025/hw-41271237" target="_blank">https://github.com/mde2025/hw-41271237</a></li>
</ul>
</div>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/5U3FO9RJmgY" width="560"></iframe></p>
<p></p>
<p></p>
<h2>task2</h2>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document, ajax  # 從 Brython 的 browser 模組匯入 html、document 和 ajax，用來操作網頁和發送請求

url = "https://mde.tw/list/2b.txt"  # 存放學生清單的純文字檔案網址

# G7 組員的學號集合，用 set 儲存，方便快速查詢是否為組員
g7_members = {"41023114", "41223218", "41223230", "41223247", "41223250", "41223240"}

# 定義當 AJAX 請求完成後要執行的函式
def on_complete(req):
    if req.status == 200:  # 如果伺服器回應狀態碼是 200（表示成功）
        data = req.text.splitlines()  # 將收到的純文字內容按行分割成列表
        all_stud = data[1:]  # 跳過第一行標題，取得所有學生資料

        # 建立一個無序清單 (UL) HTML 元素，用來放組員資料
        stud_list = html.UL()

        # 遍歷每一筆學生資料
        for stud in all_stud:
            fields = stud.split()  # 將每一行用空白切割，預期會得到 [學號, 帳號]
            if len(fields) &gt;= 2:  # 確保至少有學號和帳號兩欄
                stud_id, account = fields[:2]  # 取得學號和帳號

                # 如果這位學生是 G7 組員
                if stud_id in g7_members:
                    link = f"https://mdecd2025.github.io/hw-{stud_id}"  # 組合作業連結（對應 GitHub Pages）
                    
                    # 建立一個清單項目 (LI)，顯示帳號和超連結
                    stud_list &lt;= html.LI([
                        f"{account} - ",  # 顯示帳號
                        html.A(link, href=link, target="_blank")  # 加入一個可點擊的超連結，另開新分頁
                    ])

        # 把資訊插入到 HTML 中 id 為 brython_div1 的區塊
        document["brython_div1"] &lt;= html.P(f"G7 組員 ({len(g7_members)} 名)：")  # 顯示組員總數
        document["brython_div1"] &lt;= stud_list  # 顯示組員清單

    else:
        # 如果 AJAX 請求失敗（非 200 回應），顯示錯誤訊息
        document["brython_div1"] &lt;= html.P("無法取得資料")

# 使用 ajax.get 送出 GET 請求，完成後呼叫 on_complete 函式
ajax.get(url, oncomplete=on_complete)
</pre>
<p><a href="https://mdecd2025.github.io/hw-41223230/content/Brython.html?src=https://gist.githubusercontent.com/41223230/08a46cfd39bc94e2db5e3f6fd4def3da/raw/ad282570926b80d4247b77ba5c9b50fc0d6f6e10/g7*list">G7執行結果</a></p>
<p>小組成員名單</p>
<ul>
<li>41023114 -<span> </span><a href="https://mdecd2025.github.io/hw-41023114" target="_blank">https://mdecd2025.github.io/hw-41023114</a></li>
<li>41223218 -<span> </span><a href="https://mdecd2025.github.io/hw-41223218" target="_blank">https://mdecd2025.github.io/hw-41223218</a></li>
<li>41223230 -<span> </span><a href="https://mdecd2025.github.io/hw-41223230" target="_blank">https://mdecd2025.github.io/hw-41223230</a></li>
<li>ych0227 -<span> </span><a href="https://mdecd2025.github.io/hw-41223240" target="_blank">https://mdecd2025.github.io/hw-41223240</a></li>
<li>CYC41223247 -<span> </span><a href="https://mdecd2025.github.io/hw-41223247" target="_blank">https://mdecd2025.github.io/hw-41223247</a></li>
<li>timluo123 -<span> </span><a href="https://mdecd2025.github.io/hw-41223250" target="_blank">https://mdecd2025.github.io/hw-41223250</a></li>
</ul>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/2pGRGViRHXI" width="560"></iframe></p>
<h2>task3</h2>
<h2>task4</h2>
<p><a href="/downloads/base slvs.zip">base slvs.zip</a></p>
<p><a href="/downloads/base stl.zip">base stl.zip</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/JLAK_XxcROc" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/link_1 slvs.zip">link_1 slvs.zip</a></p>
<p><a href="/downloads/link_1 stl.zip">link_1 stl.zip</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Ts7ZFcCXKNk" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/link_2 slvs.zip">link_2 slvs.zip</a></p>
<p><a href="/downloads/link_2 stl.zip">link_2 stl.zip</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/tjHnqTaKbTE" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/link_3 slvs.zip">link_3 slvs.zip</a></p>
<p><a href="/downloads/link_3 stl.zip">link_3 stl.zip</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ypFlndK7_kQ" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/shaft_1 slvs.zip">shaft_1 slvs.zip</a></p>
<p><a href="/downloads/shaft_1 stl.zip">shaft_1 stl.zip</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/6WI1kWlBBtU" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/shaft_2 slvs.zip">shaft_2 slvs.zip</a></p>
<p><a href="/downloads/shaft_2 stl.zip">shaft_2 stl.zip</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/paWNpYCaGks" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/fourbar design.zip">fourbar design.zip</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/bdlbFYSnWEc" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/fourbar_assemble.zip">fourbar_assemble.zip</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/_vLZ-WDcLAA" width="560"></iframe></p>
<h2>task5</h2>
<p><a href="/downloads/ball.7z">ball.7z</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/2GvSd-wNujk" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/base plate.7z">base plate.7z</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/yJy7jEkn-CQ" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/connected board.7z">connected board.7z</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/rWlYSqvP8bg" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/press board.7z">press board.7z</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/6p5vr5nA5Vw" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/shaft.7z">shaft.7z</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/HTVPH48jvZY" width="560"></iframe></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p><h2>task6</h2>
<h1>Homework</h1>
<p>作業 (30%)</p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">part1:</p>
<p style="padding-left: 60px;">請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a> (1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> (171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p style="padding-left: 30px;">part2:</p>
<p style="padding-left: 60px;">請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 60px;">base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec.</p>
<p style="padding-left: 30px;">part3:</p>
<p style="padding-left: 60px;">模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2025_hw1_demo.7z">cd2025_hw1_demo.7z</a></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p style="padding-left: 30px;">請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 (<a href="https://www.youtube.com/watch?v=LloG_Jn_TI0&amp;t=51s">參考影片</a>)後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_ball_throwing_linkage.slvs">fourbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><a href="/downloads/sixbar_ball_throwing_linkage.slvs">sixbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><img alt="" height="264" src="/images/fourbar_ball_throwing_linkage.gif" width="400"/></p>
<h2>HW1</h2>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 學員學號</p>
<p></p>
<h2>HW2</h2>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號</p>
<p></p>
<h2>HW3</h2>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 學員學號</p>
<p></p>
<h1>Midterm</h1>
<p>各週進度:<span>可攜更改python 313、學員名單、小組名單、四連桿繪製組裝</span></p>
<p>各週網頁內容:<a href="https://mdecd2025.github.io/hw-41223230/content/task1.html">task1</a>、<a href="https://mdecd2025.github.io/hw-41223230/content/list.html">task1 list</a>、<a href="https://mdecd2025.github.io/hw-41223230/content/task2.html">task2</a>、<a href="https://mdecd2025.github.io/hw-41223230/content/task4.html">task4</a></p>
<p>期中心得:上完九週的課程，個人覺得這門課比上一門課困難許多，而且目前作業進度落後，需要多加跟上。</p>
<p>期中自評影片</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/mzSeBFppqBg" width="560"></iframe></p>
<p></p>
<p style="padding-left: 30px;"></p><h1>Exam</h1>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p style="padding-left: 30px;">各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景 </p>
<p style="padding-left: 30px;">各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p style="padding-left: 30px;">各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站.</p>
<p style="padding-left: 30px;">協同分組方式:</p>
<ol>
<li>分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁.</li>
</ol>
<h2>Exam1</h2>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 學員學號</p>
<h2>Exam2</h2>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號</p>
<h2>Exam3</h2>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號</p>
<h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>