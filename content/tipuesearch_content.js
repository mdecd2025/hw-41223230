var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 協同產品設計實習 - Collaborative Product Design Practice \n 學員作業網站:\xa0 https://mdecd2025.github.io/hw-41223230/ \n 學員作業倉儲:\xa0https://github.com/mdecd2025/hw-41223230 \n \n 課程代號: cd2025 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 p5z4eku \n \n 課程評分: \n Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單 \n Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單 \n Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單 \n', 'tags': '', 'url': 'About.html'}, {'title': 'repo', 'text': '', 'tags': '', 'url': 'repo.html'}, {'title': 'Tasks', 'text': '', 'tags': '', 'url': 'Tasks.html'}, {'title': 'task1', 'text': '將上學期舊版的python 311 更改為python 313，以利之後使用 新版的 SciTE, Portablegit, PUTTY, ShareX, Wink 以及原有的 tmp 及 home_ipv6, 以另存新的 \xa0start.bat \xa0 啟動 \n \n', 'tags': '', 'url': 'task1.html'}, {'title': 'list', 'text': 'from browser import html, document, ajax  # 從 Brython 的 browser 模組匯入 html、document 和 ajax，方便操作 DOM 和發送請求\n\nurl = "https://mde.tw/list/2b.txt"  # 要讀取的文字檔網址（學員清單）\n\n# 定義當 AJAX 請求完成時要執行的函式\ndef on_complete(req):\n    if req.status == 200:  # 如果請求成功（狀態碼 200）\n        data = req.text.splitlines()  # 取得文字內容並按行分割成清單\n        all_stud = data[1:]  # 去除第一行標題，只保留學生資料\n\n        # 建立一個無序清單 (UL) 元素\n        stud_list = html.UL()\n\n        # 逐行處理每位學生的資料\n        for stud in all_stud:\n            fields = stud.split()  # 假設每行資料用空白分隔，將其分割成清單\n            if len(fields) >= 2:  # 確保至少有兩個欄位（學號和帳號）\n                stud_id, account = fields[:2]  # 取得學號與帳號\n                link = f"https://github.com/mde2025/hw-{stud_id}"  # 組合 GitHub 作業連結\n\n                # 創建一個清單項目 (LI)，包含帳號和超連結\n                stud_list <= html.LI([\n                    f"{account} - ",  # 顯示帳號\n                    html.A(link, href=link, target="_blank")  # 超連結指向 GitHub 作業頁面，另開新視窗\n                ])\n\n        # 將總人數與名單插入至網頁指定區塊中\n        document["brython_div1"] <= html.P(f"總共有 {len(all_stud)} 名學員")  # 顯示總人數\n        document["brython_div1"] <= stud_list  # 顯示整個清單\n\n    else:\n        # 若請求失敗，顯示錯誤訊息\n        document["brython_div1"] <= html.P("無法取得資料")\n\n# 發送 AJAX 請求，並設定完成後執行的函式\najax.get(url, oncomplete=on_complete)\n \n \n 執行名單(64位學員) \n \n \n a40923137 - \xa0 https://github.com/mde2025/hw-40923137 \n 41023114 - \xa0 https://github.com/mde2025/hw-41023114 \n c-ching - \xa0 https://github.com/mde2025/hw-41023205 \n tseYU000 - \xa0 https://github.com/mde2025/hw-41023206 \n junpig10 - \xa0 https://github.com/mde2025/hw-41023210 \n 41023213 - \xa0 https://github.com/mde2025/hw-41023213 \n 41023215 - \xa0 https://github.com/mde2025/hw-41023215 \n 41023216 - \xa0 https://github.com/mde2025/hw-41023216 \n snowfall-killer - \xa0 https://github.com/mde2025/hw-41023218 \n YUN4 - \xa0 https://github.com/mde2025/hw-41023232 \n www000123 - \xa0 https://github.com/mde2025/hw-41023237 \n 41071202 - \xa0 https://github.com/mde2025/hw-41071202 \n 41071203 - \xa0 https://github.com/mde2025/hw-41071203 \n 41071204 - \xa0 https://github.com/mde2025/hw-41071204 \n 41223201 - \xa0 https://github.com/mde2025/hw-41223201 \n 41223202 - \xa0 https://github.com/mde2025/hw-41223202 \n 41223203 - \xa0 https://github.com/mde2025/hw-41223203 \n 41223205 - \xa0 https://github.com/mde2025/hw-41223205 \n 41223206 - \xa0 https://github.com/mde2025/hw-41223206 \n emma0312 - \xa0 https://github.com/mde2025/hw-41223207 \n 41223208-hw - \xa0 https://github.com/mde2025/hw-41223208 \n 41223209 - \xa0 https://github.com/mde2025/hw-41223209 \n 41223211 - \xa0 https://github.com/mde2025/hw-41223211 \n jjjay41223212 - \xa0 https://github.com/mde2025/hw-41223212 \n RAY41223215 - \xa0 https://github.com/mde2025/hw-41223215 \n 41223216 - \xa0 https://github.com/mde2025/hw-41223216 \n 41223217 - \xa0 https://github.com/mde2025/hw-41223217 \n 41223218 - \xa0 https://github.com/mde2025/hw-41223218 \n 41223219 - \xa0 https://github.com/mde2025/hw-41223219 \n ljg41223220 - \xa0 https://github.com/mde2025/hw-41223220 \n leeshaowei0716 - \xa0 https://github.com/mde2025/hw-41223221 \n 41223222 - \xa0 https://github.com/mde2025/hw-41223222 \n linryan23 - \xa0 https://github.com/mde2025/hw-41223223 \n 41223224 - \xa0 https://github.com/mde2025/hw-41223224 \n 41223225 - \xa0 https://github.com/mde2025/hw-41223225 \n 41223226-0 - \xa0 https://github.com/mde2025/hw-41223226 \n 41223227 - \xa0 https://github.com/mde2025/hw-41223227 \n hyy41223228 - \xa0 https://github.com/mde2025/hw-41223228 \n 41223229 - \xa0 https://github.com/mde2025/hw-41223229 \n 41223230 - \xa0 https://github.com/mde2025/hw-41223230 \n 41223231 - \xa0 https://github.com/mde2025/hw-41223231 \n 41223232 - \xa0 https://github.com/mde2025/hw-41223232 \n 41223233even - \xa0 https://github.com/mde2025/hw-41223233 \n 41223234 - \xa0 https://github.com/mde2025/hw-41223234 \n 41223235 - \xa0 https://github.com/mde2025/hw-41223235 \n 41223236 - \xa0 https://github.com/mde2025/hw-41223236 \n Cloud41223237 - \xa0 https://github.com/mde2025/hw-41223237 \n WeihHuang - \xa0 https://github.com/mde2025/hw-41223239 \n ych0227 - \xa0 https://github.com/mde2025/hw-41223240 \n 41223242 - \xa0 https://github.com/mde2025/hw-41223242 \n 41223243 - \xa0 https://github.com/mde2025/hw-41223243 \n Liu41223244 - \xa0 https://github.com/mde2025/hw-41223244 \n 41223245 - \xa0 https://github.com/mde2025/hw-41223245 \n 41223246 - \xa0 https://github.com/mde2025/hw-41223246 \n CYC41223247 - \xa0 https://github.com/mde2025/hw-41223247 \n 41223248 - \xa0 https://github.com/mde2025/hw-41223248 \n 41223249 - \xa0 https://github.com/mde2025/hw-41223249 \n timluo123 - \xa0 https://github.com/mde2025/hw-41223250 \n 41223251 - \xa0 https://github.com/mde2025/hw-41223251 \n supowen - \xa0 https://github.com/mde2025/hw-41223252 \n jacky93111 - \xa0 https://github.com/mde2025/hw-41223253 \n 41271237 - \xa0 https://github.com/mde2025/hw-41271237 \n \n \n \n \n \n', 'tags': '', 'url': 'list.html'}, {'title': 'task2', 'text': 'from browser import html, document, ajax  # 從 Brython 的 browser 模組匯入 html、document 和 ajax，用來操作網頁和發送請求\n\nurl = "https://mde.tw/list/2b.txt"  # 存放學生清單的純文字檔案網址\n\n# G7 組員的學號集合，用 set 儲存，方便快速查詢是否為組員\ng7_members = {"41023114", "41223218", "41223230", "41223247", "41223250", "41223240"}\n\n# 定義當 AJAX 請求完成後要執行的函式\ndef on_complete(req):\n    if req.status == 200:  # 如果伺服器回應狀態碼是 200（表示成功）\n        data = req.text.splitlines()  # 將收到的純文字內容按行分割成列表\n        all_stud = data[1:]  # 跳過第一行標題，取得所有學生資料\n\n        # 建立一個無序清單 (UL) HTML 元素，用來放組員資料\n        stud_list = html.UL()\n\n        # 遍歷每一筆學生資料\n        for stud in all_stud:\n            fields = stud.split()  # 將每一行用空白切割，預期會得到 [學號, 帳號]\n            if len(fields) >= 2:  # 確保至少有學號和帳號兩欄\n                stud_id, account = fields[:2]  # 取得學號和帳號\n\n                # 如果這位學生是 G7 組員\n                if stud_id in g7_members:\n                    link = f"https://mdecd2025.github.io/hw-{stud_id}"  # 組合作業連結（對應 GitHub Pages）\n                    \n                    # 建立一個清單項目 (LI)，顯示帳號和超連結\n                    stud_list <= html.LI([\n                        f"{account} - ",  # 顯示帳號\n                        html.A(link, href=link, target="_blank")  # 加入一個可點擊的超連結，另開新分頁\n                    ])\n\n        # 把資訊插入到 HTML 中 id 為 brython_div1 的區塊\n        document["brython_div1"] <= html.P(f"G7 組員 ({len(g7_members)} 名)：")  # 顯示組員總數\n        document["brython_div1"] <= stud_list  # 顯示組員清單\n\n    else:\n        # 如果 AJAX 請求失敗（非 200 回應），顯示錯誤訊息\n        document["brython_div1"] <= html.P("無法取得資料")\n\n# 使用 ajax.get 送出 GET 請求，完成後呼叫 on_complete 函式\najax.get(url, oncomplete=on_complete)\n \n G7執行結果 \n 小組成員名單 \n \n 41023114 - \xa0 https://mdecd2025.github.io/hw-41023114 \n 41223218 - \xa0 https://mdecd2025.github.io/hw-41223218 \n 41223230 - \xa0 https://mdecd2025.github.io/hw-41223230 \n ych0227 - \xa0 https://mdecd2025.github.io/hw-41223240 \n CYC41223247 - \xa0 https://mdecd2025.github.io/hw-41223247 \n timluo123 - \xa0 https://mdecd2025.github.io/hw-41223250 \n \n \n \n', 'tags': '', 'url': 'task2.html'}, {'title': 'task3', 'text': '', 'tags': '', 'url': 'task3.html'}, {'title': 'task4', 'text': 'base slvs.zip \n base stl.zip \n \n \n link_1 slvs.zip \n link_1 stl.zip \n \n \n link_2 slvs.zip \n link_2 stl.zip \n \n \n link_3 slvs.zip \n link_3 stl.zip \n \n \n shaft_1 slvs.zip \n shaft_1 stl.zip \n \n \n shaft_2 slvs.zip \n shaft_2 stl.zip \n \n \n fourbar design.zip \n \n \n fourbar_assemble.zip \n \n', 'tags': '', 'url': 'task4.html'}, {'title': 'task5', 'text': 'ball.7z \n \n \n base plate.7z \n \n \n connected board.7z \n \n \n press board.7z \n \n \n shaft.7z \n \n \n shaft1.7z \n \n \n shaft2.7z \n \n \n shaft3.7z \n \n \n shaft4.7z \n \n \n shoot board.7z \n \n \n shoot design.7z \n \n \n shooter assembly.zip \n \n \n \n \n \n \n', 'tags': '', 'url': 'task5.html'}, {'title': 'task6', 'text': '', 'tags': '', 'url': 'task6.html'}, {'title': 'Homework', 'text': '作業 (30%) \n HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n part1: \n 請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置: \n 下載  portable_wcm2025.7z  (330MB, 解開壓縮後 1.4GB) \n Webots_2025a.7z  (1.5 GB, 解開後約為 2.9GB, 可單獨運作) \n Webots_2025a_web.7z  (171 MB, 解開壓縮後約為 1GB, 必須連網運作) \n Blender4.2.7z \n part2: \n 請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景. \n base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec. \n part3: \n 模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停. \n 參考資料: \n cd2025_hw1_demo.7z \n HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n 各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景. \n 參考資料: \n fourbar_slvs.7z \n HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n 請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 ( 參考影片 )後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統. \n 參考資料: \n 參考資料: \n fourbar_ball_throwing_linkage.slvs \n sixbar_ball_throwing_linkage.slvs \n \n', 'tags': '', 'url': 'Homework.html'}, {'title': 'HW1', 'text': '\n \n fourbar webots.7z \n 操作流程 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n fourbar_controller.7z \n from controller import Robot  # 從 Webots 控制器模組匯入 Robot 類別\n\ndef run_robot():\n    # 建立 Robot 實例\n    robot = Robot()\n\n    # 獲取模擬的基本時間步長 (單位：毫秒)\n    timestep = int(robot.getBasicTimeStep())\n\n    # 取得名為 \'motor\' 的馬達裝置\n    motor = robot.getDevice(\'motor\')\n\n    # 設定馬達為無限旋轉模式（連續轉動，不是轉到特定角度）\n    motor.setPosition(float(\'inf\'))\n\n    # 設定馬達旋轉速度為 1.0 弧度/秒\n    motor.setVelocity(1.0)\n\n    # 主控制迴圈：只要模擬沒結束，就一直執行\n    while robot.step(timestep) != -1:\n        pass  # 目前不需要在每個時間步做額外的動作\n\n# 如果此檔案是直接執行的，呼叫 run_robot() 函式\nif __name__ == "__main__":\n    run_robot()\n \n \n HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 學員學號 \n', 'tags': '', 'url': 'HW1.html'}, {'title': 'HW2', 'text': '繪製檔案轉obj \n 檔案： fourbar obj \n \n \n 作業檔案： fourbar webots.7z \n \n 作業流程 \n \n \n \n \n \n \n \n \n \n \n \n \n \n HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號 \n', 'tags': '', 'url': 'HW2.html'}, {'title': 'HW3', 'text': '\n \n 作業檔案： basketball shoot webots.zip \n \n 作業流程 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 作業檔案： basketball hoop webots.7z \n # 從 Webots 的 controller 模組中導入 Robot 類別\nfrom controller import Robot\n\n# 定義主函式\ndef run_robot():\n    # 建立一個 Robot 實例，用來與模擬中的機器人互動\n    robot = Robot()\n\n    # 取得模擬的基本時間步長（以毫秒為單位）\n    timestep = int(robot.getBasicTimeStep())\n\n    # 取得名為 \'motor1\' 的馬達裝置\n    motor = robot.getDevice(\'motor1\')\n\n    # 取得鍵盤裝置，並啟用以便後續讀取輸入\n    keyboard = robot.getKeyboard()\n    keyboard.enable(timestep)  # 啟用鍵盤裝置，並設定掃描間隔為 timestep\n\n    # 設定馬達的初始位置（此處未實際使用，但可作為預設值）\n    initial_position = 0.0  # 假設初始位置為 0 弧度\n\n    # 主要控制迴圈，每次迴圈會根據 timestep 推進模擬\n    while robot.step(timestep) != -1:\n        # 將馬達的位置設定為 38 度（轉換為弧度後設為目標位置）\n        motor.setPosition(38 * 3.14159 / 180)\n\n# 如果這個程式是主程式執行，則呼叫主函式\nif __name__ == "__main__":\n    run_robot()\n \n \n 作業檔案： basketball shoot webots.zip \n HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 學員學號 \n', 'tags': '', 'url': 'HW3.html'}, {'title': 'Midterm', 'text': '各週進度: 可攜更改python 313、學員名單、小組名單、四連桿繪製組裝 \n 各週網頁內容: task1 、 task1 list 、 task2 、 task4 \n 期中心得:上完九週的課程，個人覺得這門課比上一門課困難許多，而且目前作業進度落後，需要多加跟上。 \n 期中自評影片 \n \n \n', 'tags': '', 'url': 'Midterm.html'}, {'title': 'Exam', 'text': 'Exam1 (10%): 建立 Webots 基本物件模擬場景 \n 各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam2 (10%): 利用 CAD 零組件建立模擬場景\xa0 \n 各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam3 (20%): Webots 機電模擬場景的協同設計 \n 各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站. \n 協同分組方式: \n \n 分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁. \n \n', 'tags': '', 'url': 'Exam.html'}, {'title': 'Exam1', 'text': '\n \n 作業檔案： exam1 \n Exam1 (10%): 建立 Webots 基本物件模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 學員學號', 'tags': '', 'url': 'Exam1.html'}, {'title': 'Exam2', 'text': '\n \n 考試檔案： slvs 、 webots \n Exam2 (10%): 利用 CAD 零組件建立模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號', 'tags': '', 'url': 'Exam2.html'}, {'title': 'Exam3', 'text': 'Exam3-1 \n \n Exam3-2 \n \n Exam3-3 \n \n \n 過程與心得 \n 1.首先先到 https://mde.tw/cd2025/content/IPv6.html 這個網頁找到自己的ipv6 \n 2.到電腦控制台、網際網路、乙太網路、內容ipv6做更改 \n 3.完成後打開cmd 打入 webot --stream\xa0 "檔案路徑\\檔名.wbt \n 4.正確打開webots後，打開瀏覽器到 http://localhost:1234/index.html \n 5.進入後先按connect，測試是否連上 \n 6.成功連上後將上面改成ws://[自己的ipv6]:1234 \n 7.成功連接上後，代表成功 \n 心得 \n 一開始看網頁上的敘述作業內容看的是一頭霧水，後來請教同學後才知道整個如何操作，這整個是透過 http://localhost:1234/index.html \xa0這個網頁來達到串流。 \n \n Exam3 (20%): Webots 機電模擬場景的協同設計 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號', 'tags': '', 'url': 'Exam3.html'}, {'title': 'Final', 'text': '期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%) \n 題目:  Webots 動態投籃模擬系統的協同設計 \n 說明: \n  shooter youbots \n \n supervisor Robots \n \n stand youbots \n \n \n  transform \n \n \n counter supervisor \n \n 期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%) \n 題目:\xa0 Webots 動態投籃模擬系統的協同設計 \n 籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上. \n 操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止. \n 請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中. \n 影片標題:  國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題', 'tags': '', 'url': 'Final.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};